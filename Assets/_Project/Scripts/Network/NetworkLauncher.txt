using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using TMPro;
using UnityEngine.UI;
using Photon.Realtime;
using Photon.Pun;

public class NetworkLauncher : MonoBehaviourPunCallbacks
{
    public GameObject menuBackground;

    public GameObject mainButtons;
    public GameObject settings;
    public GameObject enterName;
    public GameObject lobbyCreate;
    public GameObject lobbyJoin;
    public GameObject tutorial;

    public TMP_Text playerList;
    public Button launchButton;
    public TMP_Dropdown gamemodeSelection;
    public Button gamemodeText;

    public TMP_Dropdown gameModeDropdown;
    public TMP_Text gameModeText;

    private GameSettings[] AllGameModes;

    private void Awake()
    {
        ConnectToServer();
        GameManager.ChessFigureSetInUse = Resources.LoadAll<ChessFigureSet>("FigureSets")[0];
        AllGameModes = Resources.LoadAll<GameSettings>("GameModes");

        List<TMP_Dropdown.OptionData> dropdowndata = new List<TMP_Dropdown.OptionData>();
        for (int i = 0; i < AllGameModes.Length; i++)
        {
            dropdowndata.Add(new TMP_Dropdown.OptionData(AllGameModes[i].GamemodeName));
        }

        gameModeDropdown.AddOptions(dropdowndata);
    }

    public void ConnectToServer()
    {
        PhotonNetwork.AutomaticallySyncScene = true;

        if (!PhotonNetwork.IsConnected)
        {
            // #Critical, we must first and foremost connect to Photon Online Server.
            PhotonNetwork.ConnectUsingSettings();
            PhotonNetwork.GameVersion = Application.version;
        }
    }
    
    public override void OnConnectedToMaster()
    {
        Debug.Log("Server connected");
        PhotonNetwork.NickName = SaveSystem.LoadPlayerData().playerName;
        mainButtons.SetActive(true);
    }

    public override void OnJoinRandomFailed(short returnCode, string message)
    {
        Debug.Log("No room find, creating a new one");
        PhotonNetwork.CreateRoom(null);
    }

    public override void OnJoinedRoom()
    {
        Debug.Log("Room connected");
        mainButtons.SetActive(false);
        menuBackground.SetActive(false);
        lobbyJoin.SetActive(true);
        UpdatePlayerList();

        ChangeGameMode(0);
    }
    public override void OnLeftRoom()
    {
        Debug.Log("Room disconnected");
        mainButtons.SetActive(true);
        menuBackground.SetActive(true);
        lobbyJoin.SetActive(false);
    }
    public override void OnDisconnected(DisconnectCause cause)
    {
        Debug.Log("Server disconnected");
        mainButtons.SetActive(false);
        menuBackground.SetActive(true);
        lobbyJoin.SetActive(false);
        ConnectToServer();
    }

    public override void OnPlayerEnteredRoom(Player newPlayer)
    {
        UpdatePlayerList();
    }

    public override void OnPlayerLeftRoom(Player otherPlayer)
    {
        UpdatePlayerList();
    }

#region UI

    public void JoinLobby()
    {
        if (SaveSystem.LoadPlayerData().playerName == "Player")
        {
            mainButtons.SetActive(false);
            menuBackground.SetActive(false);
            lobbyJoin.SetActive(false);
            enterName.SetActive(true);
        }
        else
        {
            PhotonNetwork.JoinRandomRoom();
        }
    }

    public void UpdatePlayerList()
    {
        string players = "";
        for (int i = 0; i < PhotonNetwork.PlayerList.Length; i++)
        {
            players += "Player: " + PhotonNetwork.PlayerList[i].NickName;
            if (PhotonNetwork.PlayerList[i].IsMasterClient && PhotonNetwork.PlayerList[i].IsLocal)
            {
                players += " (localhost)\n";
            }
            else if (!PhotonNetwork.PlayerList[i].IsMasterClient && PhotonNetwork.PlayerList[i].IsLocal)
            {
                players += " (local)\n";
            }
            else if (PhotonNetwork.PlayerList[i].IsMasterClient && !PhotonNetwork.PlayerList[i].IsLocal)
            {
                players += " (host)\n";
            }
            else
            {
                players += "\n";
            }
        }
        playerList.text = players;
        gamemodeSelection.gameObject.SetActive(PhotonNetwork.IsMasterClient);
        gamemodeText.gameObject.SetActive(!PhotonNetwork.IsMasterClient);
        if (PhotonNetwork.IsMasterClient && AllGameModes[gamemodeSelection.value].MinPlayerCount <= PhotonNetwork.PlayerList.Length && PhotonNetwork.PlayerList.Length <= AllGameModes[gamemodeSelection.value].MaxPlayerCount)
        {
            launchButton.gameObject.SetActive(PhotonNetwork.IsMasterClient);
        }
        else
        {
            launchButton.gameObject.SetActive(false);
        }
    }

    public void LaunchGame()
    {
        if (PhotonNetwork.IsMasterClient)
        {
            PhotonNetwork.LoadLevel(1);
        }
    }

    public void ChangeGameMode(int NewGameModeID)
    {
        if (PhotonNetwork.IsMasterClient)
        {
            PhotonView.Get(this).RpcSecure("UpdateGameMode", RpcTarget.AllBufferedViaServer, false, NewGameModeID);
        }
    }

    [PunRPC]
    public void UpdateGameMode(int NewGameModeID)
    {
        GameManager.GameSettingsInUse = AllGameModes[NewGameModeID];
        Debug.Log("Gamemode selected: " +  GameManager.GameSettingsInUse.name);
        gameModeText.text = AllGameModes[NewGameModeID].GamemodeName;
        UpdatePlayerList();
    }

    public void LeaveLobby()
    {
        PhotonNetwork.LeaveRoom();
    }

    public void ChangeNameButton()
    {
        mainButtons.SetActive(false);
        settings.SetActive(false);
        menuBackground.SetActive(false);
        lobbyJoin.SetActive(false);
        enterName.SetActive(true);
    }

    public void ChangeName(string NewName)
    {
        PlayerSaveData savedata = SaveSystem.LoadPlayerData();
        savedata.playerName = NewName;
        PhotonNetwork.NickName = savedata.playerName;
        SaveSystem.SavePlayerData(savedata);

        mainButtons.SetActive(true);
        enterName.SetActive(false);
        menuBackground.SetActive(true);
    }

    public void SetNameSettings(TMP_InputField InputField)
    {
        InputField.text = SaveSystem.ValidateName(InputField.text);
    }

    public void GoToSettings()
    {
        mainButtons.SetActive(false);
        settings.SetActive(true);
    }
    public void ExitSettings()
    {
        mainButtons.SetActive(true);
        settings.SetActive(false);
    }

    public void DeleteData()
    {
        SaveSystem.DeletePlayerData();
    }

    public void ExitGame()
    {
        Application.Quit();
    }

    public void OpenTutorial()
    {
        tutorial.SetActive(true);
    }

#endregion

}
